// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.ETest.subsystems;

import org.usfirst.frc4415.ETest.RobotMap;
import org.usfirst.frc4415.ETest.commands.*;
import edu.wpi.first.wpilibj.CANTalon;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon rightFront = RobotMap.driveTrainRightFront;
    private final CANTalon leftFront = RobotMap.driveTrainLeftFront;
    private final CANTalon leftRear = RobotMap.driveTrainLeftRear;
    private final CANTalon rightRear = RobotMap.driveTrainRightRear;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TestDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void setLeft(double power){
    	leftFront.set(power);
    	leftRear.set(power);
    } 
    public void setRight(double power){ 
    	rightFront.set(-1 * power);		// -1 indicates reverse
    	rightRear.set(-1 * power);
    } 
    /*
    public void pivotLeft(double trigger){
    	rightFront.set(-1 * trigger);
    	rightRear.set(-1 * trigger );
    	leftFront.set(-1 * trigger);
    	leftRear.set(-1 * trigger);
    }
    public void pivotRight(double trigger){
    	rightFront.set(trigger);
    	rightRear.set(trigger);
    	leftFront.set(trigger);
    	leftRear.set(trigger);
    }
    */
    public void pivotLeft(){
    	rightFront.set(-.35);
    	rightRear.set(-.35 );
    	leftFront.set(-.35);
    	leftRear.set(-.35);
    }
    public void pivotRight(){
    	rightFront.set(.35);
    	rightRear.set(.35);
    	leftFront.set(.35);
    	leftRear.set(.35);
    }
    
}

