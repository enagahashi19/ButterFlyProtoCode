// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.ETest.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4415.ETest.Robot;

/**
 *
 */
public class TestDrive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	double angle;
	double magnitude;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TestDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//Robot.driveTrain.turnOnMotors();
    	

    	angle = Robot.oi.getDirection();
		magnitude = Robot.oi.getMagnitude();
		if(magnitude > 1){
			magnitude = 1;
		}
		SmartDashboard.putNumber("Angle:", angle);
		SmartDashboard.putNumber("Magnitude:", magnitude);
		double leftMotor = 0;
		double rightMotor = 0;

		if(angle >= 0 && angle < 90){						//Quadrant I
			
			leftMotor = 1;
			rightMotor = (angle - 45) / -45;
			
			Robot.driveTrain.setLeft(leftMotor * magnitude);
			SmartDashboard.putNumber("Left Motor:", leftMotor*magnitude);
			Robot.driveTrain.setRight(rightMotor * magnitude);
			SmartDashboard.putNumber("Right Motor", rightMotor*magnitude);

		}
		else if(angle >= -90 && angle < 0){					// Quadrant II

			leftMotor = (angle + 45) / 45;
			rightMotor = 1;
			
			Robot.driveTrain.setLeft(leftMotor * magnitude);
			SmartDashboard.putNumber("Left Motor:", leftMotor*magnitude);
			Robot.driveTrain.setRight(rightMotor * magnitude);
			SmartDashboard.putNumber("Right Motor", rightMotor*magnitude);
		}
		else if(angle >= 90 && angle <= 180){				// Quadrant IV

			rightMotor = - 1;
			leftMotor = -1 * (angle - 135) / 45;
			
			
			Robot.driveTrain.setLeft(leftMotor * magnitude);
			SmartDashboard.putNumber("Left Motor:", leftMotor*magnitude);
			Robot.driveTrain.setRight(rightMotor * magnitude);
			SmartDashboard.putNumber("Right Motor", rightMotor*magnitude);
		}
		
		else if(angle >= -180 && angle < -90){				// Quadrant III

			leftMotor = -1;
			rightMotor = (angle + 135) / 45;
			
			
			
			Robot.driveTrain.setLeft(leftMotor * magnitude);
			SmartDashboard.putNumber("Left Motor:", leftMotor*magnitude);
			Robot.driveTrain.setRight(rightMotor * magnitude);
			SmartDashboard.putNumber("Right Motor", rightMotor*magnitude);
		}    	
    	
    	
    	
    	/*
    	angle = Robot.oi.getDirection();
		magnitude = Robot.oi.getMagnitude();
		if(magnitude > 1){
			magnitude = 1;
		}
		SmartDashboard.putNumber("Angle:", angle);
		SmartDashboard.putNumber("Magnitude:", magnitude);
		double leftMotor = 0;
		double rightMotor = 0;

		if(angle >= 0 && angle < 90){						//Quadrant I
			
			leftMotor = 1;
			rightMotor = (angle - 45) / -45;
			
			Robot.driveTrain.setLeft(leftMotor * magnitude);
			SmartDashboard.putNumber("Left Motor:", leftMotor*magnitude);
			Robot.driveTrain.setRight(rightMotor * magnitude);
			SmartDashboard.putNumber("Right Motor", rightMotor*magnitude);

		}
		else if(angle >= -90 && angle < 0){					// Quadrant II

			leftMotor = (angle + 45) / 45;
			rightMotor = 1;
			
			Robot.driveTrain.setLeft(leftMotor * magnitude);
			SmartDashboard.putNumber("Left Motor:", leftMotor*magnitude);
			Robot.driveTrain.setRight(rightMotor * magnitude);
			SmartDashboard.putNumber("Right Motor", rightMotor*magnitude);
		}
		else if(angle >= 90 && angle <= 180){				// Quadrant IV

			rightMotor = -1 * Math.abs(angle - 135) / 45;
			
			if(angle >= 90 && angle < 135){
				leftMotor = (angle - 112.5) / -22.5;
			}
			else if(angle >= 135 && angle <= 180){
				leftMotor = -1;
			}
			Robot.driveTrain.setLeft(leftMotor * magnitude);
			SmartDashboard.putNumber("Left Motor:", leftMotor*magnitude);
			Robot.driveTrain.setRight(rightMotor * magnitude);
			SmartDashboard.putNumber("Right Motor", rightMotor*magnitude);
		}
		
		else if(angle >= -180 && angle < -90){				// Quadrant III

			leftMotor = -1 * Math.abs(angle + 135) / 45;
			
			if(angle >= -135 && angle < -90){
				rightMotor = (angle + 112.5) / 22.5;
			}
			
			else if(angle >= -180 && angle < -135){
				rightMotor = -1;
			}
			
			
			Robot.driveTrain.setLeft(leftMotor * magnitude);
			SmartDashboard.putNumber("Left Motor:", leftMotor*magnitude);
			Robot.driveTrain.setRight(rightMotor * magnitude);
			SmartDashboard.putNumber("Right Motor", rightMotor*magnitude);
		}
		*/
    	
    	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
